;@+leo-ver=4-thin
;@+node:gmc.20080916172520.4:@thin trihexagonal-compass.logo
;@@language logo
;@@comment ;

prologue

;@+others
;@+node:gcross.20080918151436.2:line
to line :length
    repeat :length [ fd 50 ]
    pu
    bk product 50 :length
    pd
end
;@-node:gcross.20080918151436.2:line
;@+node:gcross.20080918151436.3:horizontal_lines
to horizontal_lines

    repeat sum 1 :height [
        line :width
        pu lt 60 fd 50 lt 60 fd 50 rt 120 pd
    ]

    pu home pd

end
;@-node:gcross.20080918151436.3:horizontal_lines
;@+node:gcross.20080918151436.4:diagonal_lines
to diagonal_lines :rotation

    localmake :width_remaining  product 2 :width
    localmake :height_remaining product 2 :height

    localmake :distance_traveled 0

    repeat (sum 1 (quotient (difference :width 1) 2)) [
        lt :rotation
        test less? :width_remaining :height_remaining
        ift [ line :width_remaining ]
        iff [ line :height_remaining ]
        rt :rotation
        pu
        fd 100
        pd
        localmake :width_remaining (difference :width_remaining 4)
        localmake :distance_traveled (sum :distance_traveled 100)
    ]

    pu
    bk :distance_traveled
    lt (product 1.5 :rotation )
    fd (product 200 cos (quotient :rotation 2) )
    rt (product 1.5 :rotation )
    pd

    localmake :width_remaining product 2 :width
    localmake "height_remaining (difference :height_remaining 4)

    repeat (quotient (difference :height 1) 2) [
        lt :rotation
        test less? (product 2 :width_remaining ) :height_remaining
        ift [ line (product 2 :width_remaining ) ]
        iff [ line :height_remaining ]
        rt :rotation
        pu repeat 2 [ lt :rotation fd 50 lt :rotation fd 50 rt product 2 :rotation ] pd
        localmake "height_remaining (difference :height_remaining 4)
    ]

    pu home pd

end
;@nonl
;@-node:gcross.20080918151436.4:diagonal_lines
;@-others

home

penwidth 5

pencolor "blue"
horizontal_lines

pencolor "red"
diagonal_lines 60

pencolor "green"
test equal? 1 (remainder :width 2)
ift [
    pu fd (product 50 :width) rt 180 pd
    diagonal_lines -60
]
iff [
    pu fd (product 50 (difference :width 1) ) rt 180 pd
    make :width (difference :width 1)
    diagonal_lines -60
    make :width (sum :width 1)
    pu home fd (product 50 :width ) lt 90 fd (product 100 cos 30 )
    repeat (quotient :height 2) [ pd lt 30 fd 50 fd 50 pu bk 100 rt 30 fd (product 200 cos 30 ) ]
]

epilogue
;@-node:gmc.20080916172520.4:@thin trihexagonal-compass.logo
;@-leo
